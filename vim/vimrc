" vundle_needs_begin {
    " Required for Vundle
    set nocompatible
    filetype off

    " set the runtime path to include Vundle and initialize
    set rtp+=~/.vim/bundle/Vundle.vim
    call vundle#begin()
" }

" vundle_plugins_declaration {
    " let Vundle manage Vundle, required
    Plugin 'VundleVim/Vundle.vim'

    Plugin 'flazz/vim-colorschemes'

    Plugin 'scrooloose/syntastic'
    Plugin 'tpope/vim-fugitive'

    Plugin 'godlygeek/tabular'

    Plugin 'MarcWeber/vim-addon-mw-utils'
    Plugin 'tomtom/tlib_vim'
    Plugin 'garbas/vim-snipmate'
    Plugin 'honza/vim-snippets'

    Plugin 'rust-lang/rust.vim'
    Plugin 'racer-rust/vim-racer'

    Plugin 'puppetlabs/puppet-syntax-vim'
    Plugin 'rodjek/vim-puppet'

    Plugin 'vim-ruby/vim-ruby'
    Plugin 'neovimhaskell/haskell-vim'
" }

" vundle_needs_end {

    " All of your Plugins must be added before the following line
    call vundle#end()            " required
    " filetype plugin indent on    " required

"}

" colorscheme {
    colorscheme Benokai
    autocmd ColorScheme * hi Normal ctermbg=none
    autocmd ColorScheme * hi NonText ctermbg=none
"}

" syntastic_plugin_conf {
    set statusline+=%#warningmsg#
    set statusline+=%{SyntasticStatuslineFlag()}
    set statusline+=%*

    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_auto_loc_list = 1
    let g:syntastic_check_on_open = 0
    let g:syntastic_check_on_w = 1
    let g:syntastic_check_on_wq = 1
" }

" puppet_conf {
    let g:syntastic_puppet_checkers = ['puppetlint']
" }

" rust_conf {
    let g:rustfmt_autosave = 1
    let g:syntastic_rust_checkers = ['rustc']
    let g:racer_cmd = "~/.cargo/bin/racer"
    let $RUST_SRC_PATH = "~/.multirust/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/" "rustup component add …
    let g:racer_experimental_completer = 1
    "set omnifunc=syntaxcomplete#Complete
" }

" ruby_conf {
    autocmd FileType ruby setlocal expandtab shiftwidth=2 tabstop=2
"}

" haskell_conf {
    let g:haskell_enable_quantification = 1   " to enable highlighting of `forall`
    let g:haskell_enable_recursivedo = 1      " to enable highlighting of `mdo` and `rec`
    let g:haskell_enable_arrowsyntax = 1      " to enable highlighting of `proc`
    let g:haskell_enable_pattern_synonyms = 1 " to enable highlighting of `pattern`
    let g:haskell_enable_typeroles = 1        " to enable highlighting of type roles
    let g:haskell_enable_static_pointers = 1  " to enable highlighting of `static`
    let g:haskell_backpack = 1                " to enable highlighting of backpack keywords
"}

" MISC !
set t_Co=256

filetype plugin indent on   " Automatically detect file types.
syntax on                   " Syntax highlighting
set mousehide               " Hide the mouse cursor while typing
scriptencoding utf-8

set viewoptions=folds,options,cursor,unix,slash " Better Unix / Windows compatibility
set virtualedit=onemore             " Allow for cursor beyond last character
set history=1000                    " Store a ton of history (default is 20)

set hidden
" Instead of reverting the cursor to the last position in the buffer, we
" set it to the first line when editing a git commit message
au FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])

set tabpagemax=15               " Only show 15 tabs
set showmode                    " Display the current mode

set cursorline                  " Highlight current line


set backspace=indent,eol,start  " Backspace for dummies
set linespace=0                 " No extra spaces between rows
set number                      " Line numbers on
set showmatch                   " Show matching brackets/parenthesis
set incsearch                   " Find as you type search
set hlsearch                    " Highlight search terms
set winminheight=0              " Windows can be 0 line high
set ignorecase                  " Case insensitive search
set smartcase                   " Case sensitive when uc present
set wildmenu                    " Show list instead of just completing
set wildmode=list:longest,full  " Command <Tab> completion, list matches, then longest common part, then all.
set whichwrap=b,s,h,l,<,>,[,]   " Backspace and cursor keys wrap too
set scrolljump=5                " Lines to scroll when cursor leaves screen
set scrolloff=3                 " Minimum lines to keep above and below cursor
set foldenable                  " Auto fold code
set list
set listchars=tab:›\ ,trail:•,extends:#,nbsp:. " Highlight problematic whitespace

set autoindent                  " Indent at the same level of the previous line
set shiftwidth=4                " Use indents of 4 spaces
set expandtab                   " Tabs are spaces, not tabs
set tabstop=4                   " An indentation every four columns
set softtabstop=4               " Let backspace delete indent
set nojoinspaces                " Prevents inserting two spaces after punctuation on a join (J)
set splitright                  " Puts new vsplit windows to the right of the current
set splitbelow                  " Puts new split windows to the bottom of the current
set pastetoggle=<F12>           " pastetoggle (sane indentation on pastes)

let mapleader = ','

